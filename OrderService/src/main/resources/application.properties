spring.datasource.driver-class-name=org.postgresql.Driver
spring.datasource.url=jdbc:postgresql://localhost:5432/orderserive
spring.datasource.username=springboot
spring.datasource.password=Spring@Boot

## auto create table jpa set-up
spring.jpa.properties..hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
## not adviceable for production
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jps.properties.hibernate.format_sql=true

server.port=8081
eureka.client.serviceUrl.defaultZone=http://localhost:8761/eureka
spring.application.name=order-service

## actuator
management.health.circuitbreakers.enabled=true
# actuator will expose all endpoints not only health (default)
management.endpoints.web.exposure.include=*
# by default never
management.endpoint.health.show-details=always

#Resilinece4j Properties
# see diff states of circuit breaker
# inventory is the name used in the orderController
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
# buffer size
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
# i.e. if 5 back to back req to inventory-service fail then fall back init.
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
# wait 5sec before changing from open to half-open (stay in open state for 5 secs and then change)
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
# allow 3 calls in half-open state. if fails then open or close
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4J Timeout Properties
# for slow response rate
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=5s

management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
# want to trace the 100% of the request
management.tracing.sampling.probability=1.0

# Kafka Properties
spring.kafka.bootstrap-servers=localhost:9092
# setting a default topic for the send event...
spring.kafka.template.default-topic=notificationTopic
# how to serialize the key and value pair when sending to kafka broker
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
# java object to json
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
# what is the type of the object we need to jsonify
spring.kafka.producer.properties.spring.json.type.mapping=event:com.malhar.OrderService.event.OrderPlacedEvent


logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]